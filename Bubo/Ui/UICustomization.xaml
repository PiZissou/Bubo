
    
<ResourceDictionary x:Class="Bubo.UICustomization"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:Bubo">

    <!-- converters -->
    <local:EnumToBoolConverter x:Key="EnumToBoolConverter"/>
    <local:VisibleItemConverter x:Key="VisibleItemConverter"/>
    <local:ExcludeNameConverter x:Key="ExcludeNameConverter"/>
    <local:BackgroundItemConverter x:Key="BackgroundItemConverter"/>
    <local:ClassToBoolConverter x:Key="ClassToBoolConverter"/>
    <local:BlendToColorConverter x:Key="BlendToColorConverter"/>

    <!-- Fill Brushes 3dsMax Style-->
    <SolidColorBrush x:Key="MaxTextBackground" Color="#646464"/>
    <SolidColorBrush x:Key="MaxMainBackground" Color="#444444"/>
    <SolidColorBrush x:Key="MaxPanelBackground" Color="#515151"/>
    <!-- Fill Brushes 3dsMax Button Style-->
    <SolidColorBrush x:Key="MaxBtnBackground" Color="#646464"/>
    <SolidColorBrush x:Key="MaxBtnOverBackground" Color="#383838"/>
    <SolidColorBrush x:Key="MaxBtnOverForeground" Color="#EEE"/>
    <SolidColorBrush x:Key="MaxHighlightBackground" Color="#5F8AC1"/>
    <!-- Fill Brushes 3dsMax Scene Explorer Style-->
    <SolidColorBrush x:Key="MaxPairBackground" Color="#4F4F4F"/>
    <SolidColorBrush x:Key="MaxImpairBackground" Color= "#5A5A5A"/>
    
    <!-- Fill Brushes -->
    <SolidColorBrush x:Key="VeryDarkBackground" Color="#333"/>
    
    <SolidColorBrush x:Key="MainForeground" Color="#CCC"/>
    <SolidColorBrush x:Key="MainBackground" Color="#FF494949"/>
    <SolidColorBrush x:Key="LightBackground" Color="#FF727272"/>
    <SolidColorBrush x:Key="SecondBackground" Color="#FF6A6A6A"/>
    <SolidColorBrush x:Key="MainExpanderBackground" Color="#FF292828"/>
    <SolidColorBrush x:Key="SecondExpanderBackground" Color="#FF343434"/>
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
    <SolidColorBrush x:Key="SecondWindowBackground" Color="#333" />
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#FF6A6A6A" />
    <SolidColorBrush x:Key="PressedBackgroundBrush" Color="#FF727272" />
    <SolidColorBrush x:Key="PressedBackgroundTextBrush" Color="#000" />
    <SolidColorBrush x:Key="PressedBackgroundBorderBrush" Color="#FFF" />

    <SolidColorBrush x:Key="MaxItemPairBrush" Color="#FF403F3F"/>
    <SolidColorBrush x:Key="LayerItemBrush" Color="#444444"/>
    <SolidColorBrush x:Key="LayerItemHighlightBrush" Color="#2E9BF0"/>

    <SolidColorBrush x:Key="HighlightColor" Color="#2E9BF0"/>
    <SolidColorBrush x:Key="GlyphBrush" Color="#E68A2E" />
    <SolidColorBrush x:Key="RedBrush" Color="#C92f08" />
    <SolidColorBrush x:Key="PastelGreenBrush" Color="#34EBBA" />

    <FontFamily x:Key="MainFont">Tahoma</FontFamily>
    <System:Double x:Key="MainFontSize">11</System:Double>
    <System:Double x:Key="SecondFontSize">10</System:Double>

    <!-- Border Brushes -->
    <SolidColorBrush x:Key="NormalBorderBrush" Color="#E68A2E"/>
    <SolidColorBrush x:Key="MainBorderBrush" Color="#FF4F4F4F"/>
    <SolidColorBrush x:Key="LightBorderBrush" Color="#FF6C6C6C" />
    <SolidColorBrush x:Key="DarkBorderBrush" Color="#7F000000"/>


    <System:Double x:Key="SubExpanderHeight">20</System:Double>

    <!-- Kiwi Toggle Button -->
    <Style TargetType="{x:Type local:CustToggleButton}" x:Key="CustToggleButtonStyle">
        <Setter Property="Background" Value="{StaticResource MaxPanelBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource MaxBtnOverBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontFamily" Value="{StaticResource MainFont}"/>
        <Setter Property="FontSize" Value="{StaticResource SecondFontSize}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Padding" Value="3,0,3,0"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="ToggledColor" Value="#5f8ac1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:CustToggleButton"   >
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="ToggleButtonOverlay"
                                CornerRadius="0"
                                IsEnabled="{TemplateBinding IsEnabled}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                VerticalAlignment="Stretch"  
                                HorizontalAlignment="Stretch"
                                Height="{TemplateBinding Height}">
                            <TextBlock x:Name="ToggleButtonText"
                                       Padding="{TemplateBinding Padding}"
                                       FontSize="{TemplateBinding FontSize}"
                                       IsEnabled="{TemplateBinding IsEnabled}"
                                       Foreground="{TemplateBinding Foreground}"
                                       TextAlignment="Center"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center">
                                <ContentPresenter />
                            </TextBlock>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="ToggleButtonOverlay" Property="Background" Value="{Binding ToggledColor, RelativeSource={RelativeSource AncestorType={x:Type local:CustToggleButton}, Mode=FindAncestor}}"/>
                            <Setter TargetName="ToggleButtonText" Property="Foreground" Value="{Binding ToggledTextColor, RelativeSource={RelativeSource AncestorType={x:Type local:CustToggleButton}, Mode=FindAncestor}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="ToggleButtonText" Property="Foreground" Value="#FF838383"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource MaxBtnOverBackground}"/>
                            <Setter Property="Foreground" Value="{StaticResource MaxBtnOverForeground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:CustToggleButton"
           x:Key="CustToggleButtonIconStyle"
           BasedOn="{StaticResource CustToggleButtonStyle}">
        <Setter Property="Width" Value="11"/>
        <Setter Property="Height" Value="11"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ToggledColor" Value="#5f8ac1"/>
    </Style>

    <Style TargetType="local:CustToggleButton" BasedOn="{StaticResource CustToggleButtonStyle}"/>
    
    <!-- SEPARATOR -->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
        <Setter Property="Height" Value="1"/>
        <Setter Property="Margin" Value="0,1,0,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border BorderBrush="{StaticResource MaxBtnOverBackground}" BorderThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <System:Double x:Key="MenuItemHeight">20</System:Double>

    <!-- MENU -->
    <Style TargetType="Menu">
        <Setter Property="Background" Value="{StaticResource MaxMainBackground}"/>
        <Setter Property="FontSize" Value="{StaticResource SecondFontSize}"/>
        <Setter Property="FontFamily" Value="{StaticResource MainFont}"/>
        <Setter Property="Height" Value="{StaticResource MenuItemHeight}"/>
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Vertical"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- MENU ITEM -->
    <!-- top level header-->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}"
                     TargetType="MenuItem">
        <Border Name="MenuItemBorder" 
                Height="{StaticResource MenuItemHeight}"
                Margin="5,0,0,0">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" 
                                      SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon"
                                  Grid.Column="0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon"/>
                <TextBlock x:Name="MenuItemHeader"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Center"
                           Grid.Column="1"
                           Padding="2,0,2,0">
                    <ContentPresenter ContentSource="Header"
                                        VerticalAlignment="Center"
                                        RecognizesAccessKey="True" />

                </TextBlock>
                <Popup  Name="Popup"
                        Placement="Bottom"
                        IsOpen="{TemplateBinding IsSubmenuOpen}"
                        AllowsTransparency="False" 
                        Focusable="False"
                        PopupAnimation="None">
                    <Border Name="SubmenuBorder"
                            Background="{StaticResource SecondWindowBackground}"
                            BorderBrush="{StaticResource LightBorderBrush}"
                            BorderThickness="1" >
                        <StackPanel IsItemsHost="True" 
                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="MenuItemHeader" Property="Foreground" Value="{StaticResource MaxBtnOverForeground}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Opacity" Value="0.9" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="MenuItemHeader" Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="False">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- top level item -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" 
                     TargetType="MenuItem">
        <Border Background="Transparent"
                Name="Border"
                Height="{StaticResource MenuItemHeight}"
                VerticalAlignment="Center">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon"
                                  Grid.Column="0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon"
                                  HorizontalAlignment="Stretch"/>
                <ContentPresenter Grid.Column="1"
                                  VerticalAlignment="Center"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
            </Grid>

        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background"
                            Value="{StaticResource SelectedBackgroundBrush}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground"
                Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- sub menu item -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}"
                     TargetType="MenuItem">
        <Border Name="Border"
                Background="{StaticResource SecondWindowBackground}"
                Height="{StaticResource MenuItemHeight}">
            <Grid  VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center"  ContentSource="Icon"/>
                <Border Name="Check"  
                        Width="13" 
                        Height="13" 
                        Visibility="Collapsed"
                        Margin="6,0,6,0" 
                        Background="{StaticResource MaxMainBackground}"
                        BorderThickness="1"
                        BorderBrush="{StaticResource NormalBorderBrush}">
                    <Grid>
                        <Rectangle Visibility="Collapsed" Width="7" Height="7"  Fill="#E68A2E" x:Name="CheckMark" />
                    </Grid>
                </Border>
                <TextBlock Grid.Column="1"
                           x:Name="HeaderHost"
                           Padding="{TemplateBinding Padding}">
                        <ContentPresenter  ContentSource="Header"
                                           VerticalAlignment="Center"
                                           RecognizesAccessKey="True"/>
                </TextBlock>
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Text="{TemplateBinding InputGestureText}"
                           Margin="10,0,0,0"
                           DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background"
                    Value="{StaticResource SelectedBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBackgroundBorderBrush}" />
                <Setter TargetName="HeaderHost" Property="Foreground" Value="{StaticResource PressedBackgroundTextBrush}" />
                <Setter TargetName="InputGestureText" Property="Foreground" Value="{StaticResource PressedBackgroundTextBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- sub menu header -->
    <ControlTemplate  x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" 
                      TargetType="MenuItem">
        <Border Name="Border"
                Height="{StaticResource  MenuItemHeight}">
            <Grid  VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="25" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon"
                                  Margin="6,0,6,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon"/>
                <TextBlock x:Name="HeaderHost"
                           VerticalAlignment="Center"
                           Grid.Column="1"
                           Padding="{TemplateBinding Padding}">
                        <ContentPresenter 
                            ContentSource="Header"
                            RecognizesAccessKey="True"/>
                </TextBlock>
                <TextBlock  x:Name="InputGestureText"
                            Grid.Column="2"
                            VerticalAlignment="Center"
                            Text="{TemplateBinding InputGestureText}"
                            Margin="5,2,2,2"
                            DockPanel.Dock="Right"/>
                <Path   Grid.Column="3"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="M 0 0 L 0 7 L 4 3.5 Z" 
                        Fill="{StaticResource GlyphBrush}" />
                <Popup  Name="Popup"
                        Placement="Right"
                        HorizontalOffset="-4" 
                        IsOpen="{TemplateBinding IsSubmenuOpen}"
                        AllowsTransparency="False" 
                        Focusable="False"
                        PopupAnimation="None">
                    <Border Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            Background="{StaticResource SecondWindowBackground}"
                            BorderBrush="{StaticResource MainBorderBrush}"
                            BorderThickness="1" >
                        <StackPanel IsItemsHost="True" 
                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background"
                            Value="{StaticResource SelectedBackgroundBrush}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="False">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBackgroundBorderBrush}" />
                <Setter TargetName="HeaderHost" Property="Foreground" Value="{StaticResource PressedBackgroundTextBrush}" />
                <Setter TargetName="InputGestureText" Property="Foreground" Value="{StaticResource PressedBackgroundTextBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- menu item style -->
    <Style x:Key="MenuItemStyle" TargetType="MenuItem">
        <Style.Resources>
            <Style TargetType="Image">
                <Setter Property="Width" Value="13"/>
                <Setter Property="Height" Value="13"/>
            </Style>
        </Style.Resources>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="3,0,3,0"/>
        <Setter Property="FontFamily" Value="{StaticResource MainFont}"/>
        <Setter Property="FontSize" Value="{StaticResource  MainFontSize}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template"
                        Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template"
                        Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template"
                        Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template"
                        Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="MenuItem" BasedOn="{StaticResource MenuItemStyle}"/>

    <!-- CONTEXT MENU-->
    <Style TargetType="{x:Type ContextMenu}" x:Key="ContextMenuStyle">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="FontWeight" Value="Normal"/> <!-- To cancel source fontweight -->
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                            Background="{StaticResource SecondWindowBackground}"
                            BorderBrush="{StaticResource LightBorderBrush}"
                            BorderThickness="1">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="11"/>
    </Style>
    <Style TargetType="ContextMenu" BasedOn="{StaticResource ContextMenuStyle}"/>

    <!-- TEXTBLOCK -->
    <Style TargetType="TextBlock" x:Key="TextBlockStyle">
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="FontFamily" Value="{StaticResource MainFont}"/>
        <Setter Property="FontSize" Value="{StaticResource MainFontSize}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource MaxBtnOverForeground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="TextBlock" BasedOn="{StaticResource TextBlockStyle}"/>

    <!-- TEXTBOX-->
    <Style TargetType="{x:Type TextBox}" x:Key="TextBoxStyle">
        <Setter Property="SelectionBrush" Value="{StaticResource HighlightColor}"/>
        <Setter Property="SelectionOpacity" Value="0.3"/>
        <Setter Property="Background" Value="{StaticResource MaxMainBackground }"/>
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="FontSize" Value="{StaticResource MainFontSize}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border 
                          Name="Border"
                          CornerRadius="0" 
                          Padding="2"
                          Background="Transparent"
                          BorderBrush="Teal" 
                          BorderThickness="0">
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="TextElement.Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <Style x:Key="NumberTextBox"
           TargetType="TextBox"
           BasedOn="{StaticResource TextBoxStyle}">
        <EventSetter Event="PreviewTextInput" Handler="NumberTextBoxOnPreviewTextInput"/>
    </Style>
    <Style TargetType="TextBox" BasedOn="{StaticResource TextBoxStyle}"/>


    <!-- TOGGLE BUTTON-->
    <ControlTemplate x:Key="CustomToggleButton" TargetType="ToggleButton">
        <Grid>
            <Border Name="Border"/>
            <Border Name="SmallBorder"/>
        </Grid>
    </ControlTemplate>

    <!-- LISTBOXITEM -->
    <Style TargetType="ListBoxItem" x:Key="ListBoxItemStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="Border"
                            Padding="1,0,0,0">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource MaxHighlightBackground}"/>
                                <Setter Property="Foreground" Value="White"/>
                                <!--<Setter Property="FontWeight" Value="Bold"/>-->
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ListBoxItem" BasedOn="{StaticResource ListBoxItemStyle}"/>

    <!-- LISTBOX-->
    <!-- Override template for changing disabled background -->
    <Style TargetType="ListBox" x:Key="ListBoxStyle">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{x:Static SystemColors.HighlightColor}" />
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="White" />
            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="#333" />
            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{x:Static SystemColors.HighlightColor}" />
        </Style.Resources>
        <Setter Property="Background" Value="{StaticResource MaxMainBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="FontFamily" Value="{StaticResource MainFont}"/>
        <Setter Property="BorderBrush" Value="{StaticResource MainBorderBrush}"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <EventSetter Event="MouseDown" Handler="OnMouseDownListBox"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="1" SnapsToDevicePixels="True">
                        <ScrollViewer Focusable="False"
                                      Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="True"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ListBox" BasedOn="{StaticResource ListBoxStyle}"/>

    <!--GRID VIEW-->
    <Style x:Key="GridHeader" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Foreground" Value="{StaticResource MainForeground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <TextBlock Text="{TemplateBinding Content}" Padding="5" Width="{TemplateBinding Width}" TextAlignment="Center" Foreground="{StaticResource MainForeground}" FontWeight="Bold" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- COMBOBOX-->
    <ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
        <Grid Height="{TemplateBinding Height}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="10" />
            </Grid.ColumnDefinitions>
            <Border
                BorderThickness="1"
                BorderBrush="{StaticResource MainBorderBrush}"
                Name="Border"
                Background="{StaticResource MaxMainBackground}"
                Grid.ColumnSpan="2" />
            <Border
                BorderBrush="{StaticResource MainBorderBrush}"
                BorderThickness="1,1,0,1"
                Background="{StaticResource MaxMainBackground}"
                Grid.Column="0" />
            <Path
                Data="M0,0L4,4 8,0z"
                Fill="{StaticResource MainForeground}"
                Name="Arrow"
                VerticalAlignment="Center"
                Width="8"
                Margin="0,0,2,0"
                Grid.Column="1" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#66FFFFFF"/>
            </Trigger>
            <Trigger Property="UIElement.IsHitTestVisible" Value="False">
                <Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type ComboBox}" x:Key="ComboBoxStyle">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Red"/>
        </Style.Resources>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="FontSize" Value="{StaticResource SecondFontSize}"/>
        <Setter Property="FontFamily" Value="{StaticResource MainFont}"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Height" Value="18"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="10"/>
                        </Grid.ColumnDefinitions>
                        <ToggleButton ClickMode="Press"
                                      Name="ToggleButton"
                                      IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                      Focusable="False"
                                      Grid.ColumnSpan="2"
                                      Height="{TemplateBinding Height}"
                                      Template="{StaticResource ComboBoxToggleButtonTemplate}"/>
                        <ContentPresenter Name="ContentSite" 
                                          Grid.Column="0"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          IsHitTestVisible="False"
                                          RecognizesAccessKey="False"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter.Resources>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource TextBlockStyle}">
                                    <Setter Property="FontSize" Value="{StaticResource SecondFontSize}"/>
                                    <Setter Property="TextWrapping" Value="NoWrap"/>
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                       
                        <Popup  Placement="Bottom"
                                Name="Popup"
                                Focusable="False"
                                AllowsTransparency="True"                                  
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                PopupAnimation="Slide">
                            <Grid MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                  Name="DropDown"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border BorderBrush="{StaticResource LightBorderBrush}"
                                        BorderThickness="1,1,1,1"
                                        Name="DropDownBorder"                                       
                                        Background="{StaticResource MaxMainBackground}">
                                    <ScrollViewer SnapsToDevicePixels="True"
                                                  HorizontalScrollBarVisibility="Hidden"
                                                  VerticalScrollBarVisibility="Hidden">
                                        <StackPanel IsItemsHost="True"                                                            
                                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight"  TargetName="DropDownBorder"  Value="15"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ComboBoxItem" x:Key="ComboBoxItemStyle">
        <Setter Property="Background" Value="{StaticResource MaxMainBackground}" />
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="FontSize" Value="{StaticResource SecondFontSize}"/>
        <Setter Property="FontFamily" Value="{StaticResource MainFont}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="6,0,3,0"/>
        <Setter Property="Height" Value="15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" Value="{StaticResource HighlightColor}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ComboBoxItem" BasedOn="{StaticResource ComboBoxItemStyle}"/>
    <Style TargetType="ComboBox" BasedOn="{StaticResource ComboBoxStyle}"/>

    <!-- BUTTON -->
    <Style TargetType="Button" x:Key="ButtonStyle">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="FontSize" Value="{StaticResource MainFontSize}" />
        <Setter Property="Background" Value="{StaticResource MaxPanelBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="FontFamily" Value="{StaticResource MainFont}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="{StaticResource MaxBtnOverBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Padding" Value="5,0,5,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}"  >
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True"
                            Height="{TemplateBinding Height}">
                        <ContentPresenter x:Name="contentPresenter"                                         
                                          ContentTemplate="{TemplateBinding ContentTemplate}" 
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"                                          
                                          RecognizesAccessKey="True"                                          
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter  TargetName="border" Property="Background" Value="{StaticResource MaxHighlightBackground}"/>
                            <!--<Setter TargetName="border" Property="Opacity" Value="0.75" />-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource MaxBtnOverBackground}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource MaxBtnOverForeground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" x:Key="ButtonIconStyle" BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="Width" Value="17"/>
        <Setter Property="Height" Value="17"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontSize" Value="{StaticResource SecondFontSize}"/>
    </Style>
    <Style TargetType="Button" x:Key="ButtonIconStyleSmall" BasedOn="{StaticResource ButtonIconStyle}">
        <Setter Property="Width" Value="13"/>
        <Setter Property="Height" Value="13"/>
        <Setter Property="Padding" Value="0,2,0,0"/>
    </Style>
    <Style TargetType="Button" x:Key="ButtonIconStyleWithBackground" BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="Width" Value="17"/>
        <Setter Property="Height" Value="17"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="FontSize" Value="{StaticResource SecondFontSize}"/>
    </Style>
    <Style TargetType="Button" BasedOn="{StaticResource ButtonStyle}"/>

    <!-- GROUPBOX -->
    <Style TargetType="{x:Type GroupBox}" >
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Border BorderBrush="#777777"
                            BorderThickness="0"
                            Margin="0,0,0,2">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="6" />
                                <!-- Horizontal Margin around the Main Content Presenter, it works better than margin inside the content presenters' borders -->
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="6" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <!-- Header -->
                                <RowDefinition Height="1" />
                                <!-- Vertical Margin around the Main Content Presenter -->
                                <RowDefinition Height="*" />
                                <RowDefinition Height="1" />
                            </Grid.RowDefinitions>

                            <!-- Groupbox header 0,0 -->
                            <Border  Grid.Column="0"
                                     Grid.Row="0" 
                                     Grid.ColumnSpan="3"
                                     BorderBrush="#333333"
                                     BorderThickness="0" 
                                     Background="{StaticResource VeryDarkBackground}">
                                <ContentPresenter ContentSource="Header"
                                                  RecognizesAccessKey="True"
                                                  Margin="5,2,0,2" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="Left" 
                                                  VerticalAlignment="Center" >

                                </ContentPresenter>
                            </Border>
                            <!-- Original content 0,2 -->

                            <ContentPresenter Grid.Column="1"
                                              Grid.Row="2"
                                              VerticalAlignment="Stretch"
                                              HorizontalAlignment="Stretch"
                                              Margin="{TemplateBinding Padding}"                                               
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RADIO BUTTON-->
    <Style x:Key="RadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FontSize" Value="{StaticResource SecondFontSize}"/>
        <Setter Property="FontFamily" Value="{StaticResource MainFont}"/>
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13" >
                                <Ellipse x:Name="Border"  Fill="{StaticResource MaxBtnOverBackground}"    StrokeThickness="1"    Stroke="{StaticResource MainBorderBrush}" />
                                <Ellipse x:Name="CheckMark" Margin="4" Fill="{StaticResource MainForeground}" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter  Margin="4,0,0,3" VerticalAlignment="Center"  HorizontalAlignment="Left"  RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Fill" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="Stroke" Value="#40000000" />
                            <Setter Property="Foreground" Value="#80000000"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource MaxBtnOverForeground}"  />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="RadioButton" BasedOn="{StaticResource RadioButtonStyle}"/>

    <!-- TAB CONTROL -->
    <Style TargetType="TabControl">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
    </Style>

    <!-- TAB ITEM-->
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="#DDD"/>
        <Setter Property="FontSize" Value="{StaticResource MainFontSize}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Name="Border"
                                Margin="2,0,2,0" 
                                Background="{StaticResource SecondBackground}"
                                CornerRadius="2,8,0,0" 
                                BorderBrush="{StaticResource MainBorderBrush}">
                            <TextBlock Padding="2,0,2,0" >
                                <ContentPresenter x:Name="ContentSite"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Center"
                                                  ContentSource="Header"
                                                  Margin="3,2,3,2"                                             
                                                  RecognizesAccessKey="True"/>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource TextBlockStyle}"/>
                                </TextBlock.Style>
                            </TextBlock>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="Gray"></Setter>
                            <Setter Property="Panel.ZIndex" Value="100" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="Background" TargetName="Border" Value="#FF646464"></Setter>
                            <Setter Property="Foreground" Value="#FF999999"></Setter>
                            <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#FFA8A8A8"></Setter>
                            <Setter Property="FontSize" Value="5"></Setter>
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- EXPANDER -->
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Border Padding="{TemplateBinding Padding}">
            <Grid x:Name="rectangle" Background="Transparent" SnapsToDevicePixels="False">
                <Grid.RowDefinitions>
                    <RowDefinition Height="15"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid>
                    <Path x:Name="arrow"
                          Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                          HorizontalAlignment="Center" 
                          SnapsToDevicePixels="True" 
                          Stroke="{StaticResource MainForeground}"
                          StrokeThickness="2" 
                          VerticalAlignment="Center"/>
                </Grid>
                <ContentPresenter HorizontalAlignment="Center" Margin="0,0,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource MaxBtnOverForeground}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="Expander" x:Key="ExpanderStyle">
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="FontFamily" Value="{StaticResource MainFont}"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel MouseDown="OnMouseDownExpanderHeader"
                                HorizontalAlignment="Stretch"     
                                Margin="3,0,0,0">
                        <ContentPresenter Content="{Binding}"
                                          TextBlock.FontSize="{StaticResource MainFontSize}"
                                          TextBlock.TextAlignment="Left"
                                          Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Expander}}, Path=Width}"/>
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>
                        <Border Name="Border" 
                                Grid.Row="0" 
                                BorderBrush="{StaticResource LightBorderBrush}"
                                BorderThickness="0" 
                                Margin="0,0,0,0"
                                VerticalAlignment="Center"
                                Height="17"
                                Background="{StaticResource VeryDarkBackground}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="20" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton  x:Name="MyToggleButton"
                                               Grid.Column="1"
                                               IsChecked="{Binding Path=IsExpanded,Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                               OverridesDefaultStyle="True" 
                                               VerticalAlignment="Center"
                                               HorizontalAlignment="Center"
                                               Template="{StaticResource ExpanderToggleButton}" >
                                </ToggleButton>
                                <ContentPresenter   Grid.Column="0"
                                                Margin="2,0,2,0" 
                                                ContentSource="Header" 
                                                RecognizesAccessKey="True" 
                                                VerticalAlignment="Center" />
                            </Grid>
                        </Border>
                        <Border Name="Content" 
                                Grid.Row="1" 
                                Background="{TemplateBinding Background}"
                                BorderBrush="{StaticResource VeryDarkBackground}" 
                                BorderThickness="0"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content,Path=DesiredHeight}" />
                        </Trigger>
                        <Trigger Property="Tag" Value="IsSub">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource SecondExpanderBackground}"/>
                            <Setter TargetName="Border" Property="Height" Value="20"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter TargetName="MyToggleButton" Property="LayoutTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Expander" BasedOn="{StaticResource ExpanderStyle}"/>


    <!-- CHECKBOX-->
    <Style TargetType="{x:Type CheckBox}" x:Key="CheckBoxStyle">
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource GlyphBrush}"/>
        <Setter Property="Background" Value="{StaticResource LightBackground}" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Height="{TemplateBinding Height}"
                                     Margin="0"
                                     HorizontalAlignment="Left"
                                     VerticalAlignment="Center">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                                    Width="9"
                                    Height="9"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center"
                                    CornerRadius="0"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{StaticResource MaxMainBackground}"
                                    SnapsToDevicePixels="True" 
                                    Margin="0"
                                    Padding="0">

                                <Grid HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      SnapsToDevicePixels="True">
                                    <Rectangle Visibility="Collapsed"
                                               Width="5"
                                               Height="5"
                                               Fill="#E68A2E"
                                               x:Name="CheckMark" />
                                    <Rectangle Visibility="Collapsed" 
                                               Width="5"
                                               Height="5" 
                                               Fill="#E68A2E"
                                               x:Name="InderminateMark"/>
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver"/>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CheckMark">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"  Storyboard.TargetName="InderminateMark">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                                     Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter Margin="4,0,0,0"  
                                          Height="{TemplateBinding Height}"
                                          HorizontalAlignment="Right"
                                          RecognizesAccessKey="True">
                            <ContentPresenter.Resources>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource TextBlockStyle}">
                                    <Style.Triggers>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="CheckBox" BasedOn="{StaticResource CheckBoxStyle}"/>


    <!-- SCROLLBAR -->
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{StaticResource MaxMainBackground}"
                            CornerRadius="3"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumb"  TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop"  Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Opacity" Value="0.9"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{StaticResource LightBackground}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Border Background="{StaticResource MaxMainBackground}" />
            <Track x:Name="PART_Track" 
                   IsDirectionReversed="true"
                   ViewportSize="80">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>

        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="HorizontalScrollBar"  TargetType="{x:Type ScrollBar}">
        <Grid>
            <Border Background="{StaticResource MaxMainBackground}" />
            <Track x:Name="PART_Track"
                   IsDirectionReversed="False"
                   ViewportSize="80">
                <Track.DecreaseRepeatButton>
                    <RepeatButton  Style="{StaticResource ScrollBarPageButton}"
                                   Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
        </Grid>
    </ControlTemplate>
    <Style x:Key="ScrollBarType" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="8" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="8" />
                <Setter Property="Height"  Value="Auto" />
                <Setter Property="Template"  Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ScrollBar" BasedOn="{StaticResource ScrollBarType}"/>

    <!-- STACKPANEL -->
    <Style TargetType="StackPanel" x:Key="StackPannelStyle">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
    </Style>
    <Style TargetType="StackPanel" BasedOn="{StaticResource StackPannelStyle}"/>

    <!-- GRIDSPLITTER -->
    <Style TargetType="GridSplitter" x:Key="GridSplitterHorizontaleStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Height" Value="3"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
    </Style>
    <Style TargetType="GridSplitter" BasedOn="{StaticResource GridSplitterHorizontaleStyle}"/>

    <!-- PROGRESSBAR -->
    <Style TargetType="ProgressBar" x:Key="ProgressBarStyle">
        <Setter Property="Background" Value="{StaticResource LightBackground}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="Red"/>
    </Style>
    <Style TargetType="ProgressBar" BasedOn="{StaticResource ProgressBarStyle}"/>

    <!-- Toggle Button -->
    <Style TargetType="{x:Type ToggleButton}" x:Key="ToggleButtonStyle">
        <Setter Property="Background" Value="{StaticResource SecondBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="FontFamily" Value="{StaticResource MainFont}"/>
        <Setter Property="FontSize" Value="{StaticResource SecondFontSize}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="2,1,2,1"/>
        <Setter Property="Height" Value="18"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton"   >
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="ToggleButtonOverlay"
                                CornerRadius="0"
                                IsEnabled="{TemplateBinding IsEnabled}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalAlignment}">
                            <TextBlock x:Name="ToggleButtonText"
                                       Padding="{TemplateBinding Padding}"
                                       FontSize="{TemplateBinding FontSize}"
                                       IsEnabled="{TemplateBinding IsEnabled}"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center">
                                <ContentPresenter />
                            </TextBlock>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="ToggleButtonOverlay" Property="Background" Value="#FFB7CCDC"/>
                            <Setter TargetName="ToggleButtonText" Property="Foreground" Value=" #CC444444"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="ToggleButtonText" Property="Foreground" Value="#FF838383"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ToggleButton" BasedOn="{StaticResource ToggleButtonStyle}"/>
    
    <!-- TREE VIEW STYLIZATION -->
    <Style TargetType="TreeView">
        <Setter Property="Background" Value="{StaticResource LightBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="BorderThickness" Value="0"/>

    </Style>

    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="BorderBrush" Value="red"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0,0,0,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent">
                        <Path x:Name="ExpandPath"
                          HorizontalAlignment="Left" 
                          VerticalAlignment="Center" 
                          Margin="1,2,0,1"
                          Fill="{StaticResource MainForeground}"
                          StrokeThickness="0.5"
                          Stroke="{StaticResource DarkBorderBrush}"
                          Data="M 4 0 L 10 5 L 5 10 Z"
                          />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="ExpandPath" Value="M 2 0 L 12 0 L 7 6 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  TargetType="{x:Type TreeViewItem}" x:Key="TreeViewItemStyle">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="IsExpanded" Value="True"/>
        <Setter Property="Tag" Value="{Binding Tag, RelativeSource={RelativeSource AncestorType=TreeViewItem}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}" >
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="10" Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" 
                                      ClickMode="Press"
                                      Width="13"
                                      Height="15"
                                      VerticalContentAlignment="Center"
                                      VerticalAlignment="Center"                                             
                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" 
                                      Style="{StaticResource ExpandCollapseToggleStyle}" />
                        <Border x:Name="Bd" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                Grid.Column="1"                                 
                                SnapsToDevicePixels="true"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"                                            
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" 
                                        Grid.ColumnSpan="2"
                                        Grid.Column="1"
                                        Grid.Row="1"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Tag" >
                            <Trigger.Value>
                                <System:Boolean>True</System:Boolean>
                            </Trigger.Value>
                            <Setter Property="Visibility" TargetName="Expander" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="TreeViewItem" BasedOn="{StaticResource TreeViewItemStyle}"/>
    
    
    <ControlTemplate x:Key="SliderTemplate" TargetType="{x:Type Slider}">
        <Border BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="Transparent" 
                SnapsToDevicePixels="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TickBar x:Name="TopTick"
                         Fill="{TemplateBinding Foreground}"
                         Height="4"
                         Placement="Top"
                         Grid.Row="0"
                         Visibility="Collapsed"/>
                <TickBar x:Name="BottomTick"
                         Fill="{TemplateBinding Foreground}"
                         Height="4" 
                         Placement="Bottom"
                         Grid.Row="2"
                         Visibility="Collapsed"/>
                <Border x:Name="TrackBackground"
                        BorderThickness="0.5" 
                        Background="{TemplateBinding Background}"
                        CornerRadius="1"
                        Height="4"
                        Margin="5,0"
                        Grid.Row="1">
                    <Border.BorderBrush>
                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                            <GradientStop Color="#FFAEB1AF" Offset="0.1"/>
                            <GradientStop Color="White" Offset="0.9"/>
                        </LinearGradientBrush>
                    </Border.BorderBrush>
                    <Canvas Margin="-6,-1">
                        <Rectangle x:Name="PART_SelectionRange"
                                   Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                   Height="4" 
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" 
                                   StrokeThickness="1" 
                                   Visibility="Hidden"/>
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track"
                       Grid.Row="1">
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}">
                            <Thumb.Style>
                                <Style TargetType="{x:Type Thumb}">
                                    <Setter Property="Focusable" Value="False"/>
                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                    <Setter Property="Height" Value="8"/>
                                    <Setter Property="Width" Value="11"/>
                                    <Setter Property="Foreground" Value="Gray"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                <Canvas SnapsToDevicePixels="True">
                                                    <Canvas.RenderTransform>
                                                        <TranslateTransform X="0" Y="-3"/>
                                                    </Canvas.RenderTransform>
                                                    <Rectangle x:Name="Background" 
                                                               Fill="{StaticResource MaxMainBackground}"
                                                               Stroke="#7F808080" 
                                                               StrokeThickness="1" 
                                                               Width="10" 
                                                               Height="14"/>
                                                </Canvas>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Fill" TargetName="Background" Value="DarkGray" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Thumb.Style>
                        </Thumb>
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Style" TargetName="Thumb">
                    <Setter.Value>
                        <Style TargetType="{x:Type Thumb}">
                            <Setter Property="Focusable" Value="False"/>
                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                            <Setter Property="Height" Value="18"/>
                            <Setter Property="Width" Value="10"/>
                            <Setter Property="Foreground" Value="Gray"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                        <Canvas SnapsToDevicePixels="True">
                                            <Canvas.RenderTransform>
                                                <TransformGroup>
                                                    <RotateTransform Angle="180"/>
                                                    <TranslateTransform X="5" Y="9"/>
                                                </TransformGroup>
                                            </Canvas.RenderTransform>
                                            <Path x:Name="Background" Data="M4.5,-7.5A1,1,0,0,0,3.5,-8.5L-3.5,-8.5A1,1,0,0,0,-4.5,-7.5L-4.5,4.5 -0.5,8.5 0.5,8.5 4.5,4.5z">
                                                <Path.Fill>
                                                    <LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
                                                        <GradientStop Color="White" Offset="0"/>
                                                        <GradientStop Color="#FFF0EFEF" Offset="0.4"/>
                                                        <GradientStop Color="#FFD6D5D5" Offset="0.8"/>
                                                    </LinearGradientBrush>
                                                </Path.Fill>
                                            </Path>
                                            <Path x:Name="InnerBorder" Data="M3.5,-7.5L-3.5,-7.5 -3.5,4.5 0,8 3.5,4.5z" Stroke="White" StrokeThickness="1"/>
                                            <Path x:Name="OuterBorder" Data="M4.5,-7.5A1,1,0,0,0,3.5,-8.5L-3.5,-8.5A1,1,0,0,0,-4.5,-7.5L-4.5,4.5 -0.5,8.5 0.5,8.5 4.5,4.5z" Stroke="#FF929292" StrokeThickness="1"/>
                                        </Canvas>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Fill" TargetName="Background">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
                                                            <GradientStop Color="White" Offset="0"/>
                                                            <GradientStop Color="#FFB8E2F9" Offset="0.5"/>
                                                            <GradientStop Color="#FFB0DFF8" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Stroke" TargetName="OuterBorder" Value="#FF3C7FB1"/>
                                            </Trigger>
                                            <Trigger Property="Foreground" Value="Blue">
                                                <Setter Property="Fill" TargetName="Background">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
                                                            <GradientStop Color="White" Offset="0"/>
                                                            <GradientStop Color="#FFB8E2F9" Offset="0.5"/>
                                                            <GradientStop Color="#FFB0DFF8" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Stroke" TargetName="OuterBorder" Value="#FF3C7FB1"/>
                                            </Trigger>
                                            <Trigger Property="IsDragging" Value="True">
                                                <Setter Property="Fill" TargetName="Background">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
                                                            <GradientStop Color="#FFB8E4FA" Offset="0.25"/>
                                                            <GradientStop Color="#FF5EB4E3" Offset="0.5"/>
                                                            <GradientStop Color="#FF4C8BB4" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Stroke" TargetName="OuterBorder" Value="#FF2C628B"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Fill" TargetName="Background" Value="#FFF4F4F4"/>
                                                <Setter Property="Stroke" TargetName="InnerBorder" Value="{x:Null}"/>
                                                <Setter Property="Data" TargetName="OuterBorder" Value="M-5,-10.5L5,-10.5 5,10.5 -5,10.5z"/>
                                                <Setter Property="Stroke" TargetName="OuterBorder" Value="#FFAEB1AF"/>
                                                <Setter Property="Data" TargetName="OuterBorder" Value="M4.5,-8.5L-4.5,-8.5 -4.5,4.5 -0.5,8.5 0.5,8.5 4.5,4.5z"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <!--<Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0"/>-->
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Style" TargetName="Thumb">
                    <Setter.Value>
                        <Style TargetType="{x:Type Thumb}">
                            <Setter Property="Focusable" Value="False"/>
                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                            <Setter Property="Height" Value="18"/>
                            <Setter Property="Width" Value="10"/>
                            <Setter Property="Foreground" Value="Gray"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                        <Canvas SnapsToDevicePixels="True">
                                            <Canvas.RenderTransform>
                                                <TranslateTransform X="5" Y="9"/>
                                            </Canvas.RenderTransform>
                                            <Path x:Name="Background" Data="M4.5,-7.5A1,1,0,0,0,3.5,-8.5L-3.5,-8.5A1,1,0,0,0,-4.5,-7.5L-4.5,4.5 -0.5,8.5 0.5,8.5 4.5,4.5z">
                                                <Path.Fill>
                                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                        <GradientStop Color="White" Offset="0"/>
                                                        <GradientStop Color="#FFF0EFEF" Offset="0.4"/>
                                                        <GradientStop Color="#FFD6D5D5" Offset="0.8"/>
                                                    </LinearGradientBrush>
                                                </Path.Fill>
                                            </Path>
                                            <Path x:Name="InnerBorder" Data="M3.5,-7.5L-3.5,-7.5 -3.5,4.5 0,8 3.5,4.5z" Stroke="White" StrokeThickness="1"/>
                                            <Path x:Name="OuterBorder" Data="M4.5,-7.5A1,1,0,0,0,3.5,-8.5L-3.5,-8.5A1,1,0,0,0,-4.5,-7.5L-4.5,4.5 -0.5,8.5 0.5,8.5 4.5,4.5z" Stroke="#FF929292" StrokeThickness="1"/>
                                        </Canvas>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Fill" TargetName="Background">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                            <GradientStop Color="White" Offset="0"/>
                                                            <GradientStop Color="#FFB8E2F9" Offset="0.5"/>
                                                            <GradientStop Color="#FFB0DFF8" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Stroke" TargetName="OuterBorder" Value="#FF3C7FB1"/>
                                            </Trigger>
                                            <Trigger Property="Foreground" Value="Blue">
                                                <Setter Property="Fill" TargetName="Background">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                            <GradientStop Color="White" Offset="0"/>
                                                            <GradientStop Color="#FFB8E2F9" Offset="0.5"/>
                                                            <GradientStop Color="#FFB0DFF8" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Stroke" TargetName="OuterBorder" Value="#FF3C7FB1"/>
                                            </Trigger>
                                            <Trigger Property="IsDragging" Value="True">
                                                <Setter Property="Fill" TargetName="Background">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                            <GradientStop Color="#FFB8E4FA" Offset="0.25"/>
                                                            <GradientStop Color="#FF5EB4E3" Offset="0.5"/>
                                                            <GradientStop Color="#FF4C8BB4" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Stroke" TargetName="OuterBorder" Value="#FF2C628B"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Fill" TargetName="Background" Value="#FFF4F4F4"/>
                                                <Setter Property="Stroke" TargetName="InnerBorder" Value="{x:Null}"/>
                                                <Setter Property="Data" TargetName="OuterBorder" Value="M-5,-10.5L5,-10.5 5,10.5 -5,10.5z"/>
                                                <Setter Property="Stroke" TargetName="OuterBorder" Value="#FFAEB1AF"/>
                                                <Setter Property="Data" TargetName="OuterBorder" Value="M4.5,-8.5L-4.5,-8.5 -4.5,4.5 -0.5,8.5 0.5,8.5 4.5,4.5z"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <!--<Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2"/>-->
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="True">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="Slider">
        <Setter Property="LargeChange" Value="0.01"/>
        <Setter Property="SmallChange" Value="0.005"/>
        <Setter Property="Minimum" Value="0"/>
        <Setter Property="Maximum" Value="1"/>
        <Setter Property="IsMoveToPointEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource SliderTemplate}"/>
    </Style>
</ResourceDictionary>